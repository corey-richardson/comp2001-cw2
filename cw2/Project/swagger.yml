openapi: 3.0.0
info:
  title: "COMP2000 CW2 API"
  description: "Trail Service API developed for COMP2000 CW2 by Corey Richardson. <br><br>Testing of Create, Update and Delete methods should be tested via a software such as Postman as these require an `Authorization` header to be included in the request. <br><br> Firstly,  use the `Authentication` endpoint to generate a JWT token and then include this as the `Authorization` header in the format `Bearer <TOKEN>`. This token will expire after an hour."
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:

    Feature:
      type: object
      required:
        - feature
      properties:
        id:
          type: integer
          description: "Unique identifier for the feature"
          readOnly: true
        feature:
          type: string
          description: "Tag describing a trail"

    Point:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the point."
          readOnly: true
        next_point_id:
          type: integer
          description: "Unique identifier for the next point. Points follow a doubly-linked list structure."
        previous_point_id:
          type: integer
          description: "Unique identifier for the previous point. Points follow a doubly-linked list structure."
        latitude:
          type: number
          format: float
          description: "Latitude of the point."
        longitude:
          type: number
          format: float
          description: "Longitude of the point."
        description:
          type: string
          description: "Description of the point."

    Trail:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the trail."
          readOnly: true
        author_id:
          type: integer
          description: "Unique identifier for the author of the trail."
          nullable: true
        starting_point_id:
          type: integer
          description: "Unique identifier for the starting point of the trail."
          nullable: true
        name:
          type: string
          description: "Name of the trail."
        summary:
          type: string
          description: "Short summary of the trail."
        description:
          type: string
          description: "Detailed description of the trail."
        difficulty:
          type: string
          description: "The difficulty level of the trail."
          enum:
            - "Easy"
            - "Moderate"
            - "Hard"
        location:
          type: string
          description: "Location of the trail."
        length:
          type: number
          format: float
          description: "Length of the trail."
        elevation_gain:
          type: integer
          description: "Elevation gain over the course of the trail."
        route_type:
          type: string
          description: "Type of route that the trail is."
          enum:
            - "Loop"
            - "Out & back"
            - "Point to point"
      description: "A trail that describes a route with various properties. Combination of name and location must be unique."

    User:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the user."
          readOnly: true
        email:
          type: string
          description: "Email address of the user"
        role:
          type: string
          description: "The users access level."
          enum:
            - "ADMIN"
            - "USER"

  parameters:
    
    feature_id:
      name: "feature_id"
      description: "ID of a feature."
      in: "path"
      required: true
      schema:
        type: "integer"

    point_id:
      name: "point_id"
      description: "ID of the point."
      in: "path"
      required: true
      schema:
        type: "integer"

    trail_id:
      name: "trail_id"
      description: "ID of the trail."
      in: "path"
      required: true
      schema:
        type: "integer"

    user_id:
      name: "user_id"
      description: "ID of the user."
      in: "path"
      required: true
      schema:
        type: "integer"

paths:

  /login:
    post:
      operationId: "Authentication.authenticate"
      tags:
        - "Authentication"
      summary: "User Login"
      description: "Authenticates a user and returns a token."
      requestBody:
        description: "User login details"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address"
                password:
                  type: string
                  description: "The user's password"
      responses:
        "200":
          description: "Authentication successful, returns a token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT token for authentication"
        "401":
          description: "Invalid credentials"
        "400":
          description: "Invalid request payload"

  /feature:

    post:
      operationId: "Feature.create"
      tags:
        - "Feature"
      summary: "Create a feature"
      requestBody:
        description: "Feature to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feature"
      responses:
        "201":
          description: "Feature created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "400":
          description: "Validation error"
    
    get:
      operationId: "Feature.read_all"
      tags:
        - "Feature"
      summary: "Read the list of features"
      responses:
        "200":
          description: "Successfully read feature list"
  
  /feature/{feature_id}:

    get:
      tags:
        - "Feature"
      operationId: "Feature.read_one"
      summary: "Read one feature"
      parameters:
        - $ref: "#/components/parameters/feature_id"
      responses:
        "200":
          description: "Successfully read feature"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"

    put:
      tags:
        - "Feature"
      operationId: "Feature.update"
      summary: "Update a feature"
      parameters:
        - $ref: "#/components/parameters/feature_id"
      responses:
        "200":
          description: "Successfully updated feature"
        "400":
          description: "Validation error"
        "404":
          description: "Point not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feature"

    delete:
      tags:
        - "Feature"
      operationId: "Feature.delete"
      summary: "Delete a feature"
      parameters:
        - $ref: "#/components/parameters/feature_id"
      responses:
        "204":
          description: "Successfully deleted feature"

  /point:

    post:
      operationId: "Point.create"
      tags:
        - "Point"
      summary: "Create a point"
      requestBody:
        description: "Point to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Point"
      responses:
        "201":
          description: "Point created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Point"
        "400":
          description: "Validation error"

    get:
      operationId: "Point.read_all"
      tags:
        - "Point"
      summary: "Read the list of points"
      responses:
        "200":
          description: "Successfully read point list"

  /point/{point_id}:

    get:
      tags:
        - "Point"
      operationId: "Point.read_one"
      summary: "Read one point"
      parameters:
        - $ref: "#/components/parameters/point_id"
      responses:
        "200":
          description: "Successfully read point"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Point"

    put:
      tags:
        - "Point"
      operationId: "Point.update"
      summary: "Update a point"
      parameters:
        - $ref: "#/components/parameters/point_id"
      responses:
        "200":
          description: "Successfully updated point"
        "400":
          description: "Validation error"
        "404":
          description: "Point not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Point"

    delete:
      tags:
        - "Point"
      operationId: "Point.delete"
      summary: "Delete a point"
      parameters:
        - $ref: "#/components/parameters/point_id"
      responses:
        "204":
          description: "Successfully deleted point"

  /trail:

    post:
      operationId: "Trail.create"
      tags:
        - "Trail"
      summary: "Create a trail"
      requestBody:
        description: "Trail to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trail"
      responses:
        "201":
          description: "Trail created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trail"
        "400":
          description: "Validation error"

    get:
      operationId: "Trail.read_all"
      tags:
        - "Trail"
      summary: "Read the list of trails"
      responses:
        "200":
          description: "Successfully read trail list"

  /trail/{trail_id}:

    get:
      tags:
        - "Trail"
      operationId: "Trail.read_one"
      summary: "Read one trail"
      parameters:
        - $ref: "#/components/parameters/trail_id"
      responses:
        "200":
          description: "Successfully read trail"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trail"

    put:
      tags:
        - "Trail"
      operationId: "Trail.update"
      summary: "Update a trail"
      parameters:
        - $ref: "#/components/parameters/trail_id"
      responses:
        "200":
          description: "Successfully updated trail"
        "400":
          description: "Validation error"
        "404":
          description: "Trail not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trail"

    delete:
      tags:
        - "Trail"
      operationId: "Trail.delete"
      summary: "Delete a trail"
      parameters:
        - $ref: "#/components/parameters/trail_id"
      responses:
        "204":
          description: "Successfully deleted trail"

  /trail-feature:

    post:
      operationId: "TrailFeature.create"
      tags:
        - "Trail-Feature Link"
      summary: "Create a link between a Trail and a Feature"
      requestBody:
        description: "Link to create"
        required: true
        content:
          application/json:
            schema:
              properties:
                trail_id:
                  type: integer
                  description: "ID of the trail"
                  example: 1
                feature_id:
                  type: integer
                  description: "ID of the feature"
                  example: 2
              required:
                - trail_id
                - feature_id
      responses:
        "201":
          description: "TrailFeature link created successfully"
        "400":
          description: "Validation error or duplicate link"

    get:
      operationId: "TrailFeature.read_all"
      tags:
        - "Trail-Feature Link"
      summary: "Read the list of Trail-Feature links"
      responses:
        "200":
          description: "Successfully read trail-feature link list"
  
  /trail-feature/{trail_id}/features:

    get:
      tags:
        - "Trail-Feature Link"
      operationId: "TrailFeature.read_trail"
      summary: "Read features linked to a given trail"
      parameters:
        - $ref: "#/components/parameters/trail_id"
      responses:
        "200":
          description: "Successfully read trail-feature link list"

  /trail-feature/{trail_id}/{feature_id}:

    get:
      tags:
        - "Trail-Feature Link"
      operationId: "TrailFeature.read_one"
      summary: "Read one Trail-Feature link"
      parameters:
        - $ref: "#/components/parameters/trail_id"
        - $ref: "#/components/parameters/feature_id"
      responses:
        "200":
          description: "Successfully read Trail-Feature link"
          content:
            application/json:
              schema:
                type: object
                properties:
                  trail_id:
                    type: integer
                    description: "ID of the trail"
                  feature_id:
                    type: integer
                    description: "ID of the feature"
        "404":
          description: "TrailFeature link not found"
    
    put:
      tags:
        - "Trail-Feature Link"
      operationId: "TrailFeature.update"
      summary: "Update a Trail-Feature link"
      parameters:
        - $ref: "#/components/parameters/trail_id"
        - $ref: "#/components/parameters/feature_id"
      responses:
        "200":
          description: "Successfully updated usTrail-Feature Linker"
        "400":
          description: "Validation error"
        "404":
          description: "Trail-Feature Link not found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                trail_id:
                  type: integer
                  description: "ID of the trail"
                feature_id:
                  type: integer
                  description: "ID of the feature"

    delete:
      tags:
        - "Trail-Feature Link"
      operationId: "TrailFeature.delete"
      summary: "Delete a Trail-Feature link"
      parameters:
        - $ref: "#/components/parameters/trail_id"
        - $ref: "#/components/parameters/feature_id"
      responses:
        "204":
          description: "Successfully deleted trail-feature link"
            
  /user:

    post:
      operationId: "User.create"
      tags:
        - "User"
      summary: "Create a user"
      requestBody:
        description: "User to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Validation error"
    
    get:
      operationId: "User.read_all"
      tags:
        - "User"
      summary: "Read the list of users"
      responses:
        "200":
          description: "Successfully read user list"

  /user/{user_id}:

    get:
      tags:
        - "User"
      operationId: "User.read_one"
      summary: "Read one user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - "User"
      operationId: "User.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully updated user"
        "400":
          description: "Validation error"
        "404":
          description: "User not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

    delete:
      tags:
        - "User"
      operationId: "User.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "204":
          description: "Successfully deleted user"
